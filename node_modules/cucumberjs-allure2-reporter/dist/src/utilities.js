"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var allure2_js_commons_1 = require("allure2-js-commons");
var crypto_1 = require("crypto");
function statusTextToAllure(status) {
    if (status === "passed")
        return allure2_js_commons_1.Status.PASSED;
    if (status === "skipped")
        return allure2_js_commons_1.Status.SKIPPED;
    if (status === "failed")
        return allure2_js_commons_1.Status.FAILED;
    return allure2_js_commons_1.Status.BROKEN;
}
exports.statusTextToAllure = statusTextToAllure;
function statusTextToStage(status) {
    if (status === "passed")
        return allure2_js_commons_1.Stage.FINISHED;
    if (status === "skipped")
        return allure2_js_commons_1.Stage.PENDING;
    if (status === "failed")
        return allure2_js_commons_1.Stage.INTERRUPTED;
    return allure2_js_commons_1.Stage.INTERRUPTED;
}
exports.statusTextToStage = statusTextToStage;
function hash(data) {
    return crypto_1.createHash("md5").update(data).digest("hex");
}
exports.hash = hash;
function applyExample(text, example) {
    if (example === undefined)
        return text;
    for (var argName in example.arguments) {
        if (!example.arguments.hasOwnProperty(argName))
            continue;
        text = text.replace(new RegExp("<" + argName + ">", "g"), "<" + example.arguments[argName] + ">");
    }
    return text;
}
exports.applyExample = applyExample;
/**
 * remove shortest leading indentation from all lines
*/
function stripIndent(data) {
    var match = data.match(/^[^\S\n]*(?=\S)/gm);
    if (match !== null) {
        var indent = Math.min.apply(Math, match.map(function (sp) { return sp.length; }));
        return data.replace(new RegExp("^.{" + indent + "}", "gm"), "");
    }
    return data;
}
exports.stripIndent = stripIndent;
//# sourceMappingURL=utilities.js.map