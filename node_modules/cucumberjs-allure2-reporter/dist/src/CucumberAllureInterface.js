"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var allure2_js_commons_1 = require("allure2-js-commons");
var CucumberAllureInterface = /** @class */ (function (_super) {
    __extends(CucumberAllureInterface, _super);
    function CucumberAllureInterface(reporter) {
        var _this = _super.call(this) || this;
        _this.reporter = reporter;
        return _this;
    }
    Object.defineProperty(CucumberAllureInterface.prototype, "currentExecutable", {
        get: function () {
            var result = this.reporter.currentStep || this.reporter.currentTest;
            if (result === null)
                throw new Error("No executable!");
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CucumberAllureInterface.prototype, "currentTest", {
        get: function () {
            if (this.reporter.currentTest === null)
                throw new Error("No test running!");
            return this.reporter.currentTest;
        },
        enumerable: true,
        configurable: true
    });
    CucumberAllureInterface.prototype.setDescription = function (text) {
        this.currentExecutable.description = text;
        this.currentExecutable.descriptionHtml = text;
    };
    CucumberAllureInterface.prototype.setTestDescription = function (text) {
        this.currentTest.description = text;
        this.currentTest.descriptionHtml = text;
    };
    CucumberAllureInterface.prototype.setFlaky = function () {
        this.currentExecutable.detailsFlaky = true;
    };
    CucumberAllureInterface.prototype.setKnown = function () {
        this.currentExecutable.detailsKnown = true;
    };
    CucumberAllureInterface.prototype.setMuted = function () {
        this.currentExecutable.detailsMuted = true;
    };
    CucumberAllureInterface.prototype.addOwner = function (owner) {
        this.currentTest.addLabel(allure2_js_commons_1.LabelName.OWNER, owner);
    };
    CucumberAllureInterface.prototype.setSeverity = function (severity) {
        this.currentTest.addLabel(allure2_js_commons_1.LabelName.SEVERITY, severity);
    };
    CucumberAllureInterface.prototype.addIssue = function (issue) {
        this.currentTest.addLabel(allure2_js_commons_1.LabelName.ISSUE, issue);
    };
    CucumberAllureInterface.prototype.addTag = function (tag) {
        this.currentTest.addLabel(allure2_js_commons_1.LabelName.TAG, tag);
    };
    CucumberAllureInterface.prototype.addTestType = function (type) {
        this.currentTest.addLabel(allure2_js_commons_1.LabelName.TEST_TYPE, type);
    };
    CucumberAllureInterface.prototype.addLink = function (name, url, type) {
        this.currentTest.addLink(name, url, type);
    };
    CucumberAllureInterface.prototype.startStep = function (name) {
        var allureStep = this.currentExecutable.startStep(name);
        this.reporter.pushStep(allureStep);
        return new WrappedStep(this.reporter, allureStep);
    };
    CucumberAllureInterface.prototype.step = function (name, body) {
        var wrappedStep = this.startStep(name);
        var result;
        try {
            result = wrappedStep.run(body);
        }
        catch (err) {
            wrappedStep.endStep();
            throw err;
        }
        if (allure2_js_commons_1.isPromise(result)) {
            var promise = result;
            return promise.then(function (a) {
                wrappedStep.endStep();
                return a;
            }).catch(function (e) {
                wrappedStep.endStep();
                throw e;
            });
        }
        else {
            wrappedStep.endStep();
            return result;
        }
    };
    CucumberAllureInterface.prototype.attachment = function (name, content, type) {
        var file = this.reporter.writeAttachment(content, type);
        this.currentExecutable.addAttachment(name, type, file);
    };
    CucumberAllureInterface.prototype.testAttachment = function (name, content, type) {
        var file = this.reporter.writeAttachment(content, type);
        this.currentTest.addAttachment(name, type, file);
    };
    CucumberAllureInterface.prototype.addParameter = function (name, value) {
        this.currentTest.addParameter(name, value);
    };
    CucumberAllureInterface.prototype.addLabel = function (name, value) {
        this.currentTest.addLabel(name, value);
    };
    CucumberAllureInterface.prototype.getGlobalInfoWriter = function () {
        return this.reporter.getGlobalInfoWriter();
    };
    return CucumberAllureInterface;
}(allure2_js_commons_1.AllureInterface));
exports.CucumberAllureInterface = CucumberAllureInterface;
var WrappedStep = /** @class */ (function () {
    function WrappedStep(reporter, step) {
        this.reporter = reporter;
        this.step = step;
    }
    WrappedStep.prototype.startStep = function (name) {
        var step = this.step.startStep(name);
        this.reporter.pushStep(step);
        return new WrappedStep(this.reporter, step);
    };
    WrappedStep.prototype.endStep = function () {
        this.reporter.popStep();
        this.step.endStep();
    };
    WrappedStep.prototype.run = function (body) {
        return this.step.wrap(body)();
    };
    return WrappedStep;
}());
exports.WrappedStep = WrappedStep;
//# sourceMappingURL=CucumberAllureInterface.js.map